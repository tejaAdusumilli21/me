{
"section": "Integration",
  "levels": {
    "level8": {
      "questions": [
        {
          "id": 1,
          "question": "What are the different types of Salesforce Integration?",
          "options": {
            "A": "Only UI-driven integrations using Visualforce.",
            "B": "Only Apex-based synchronous callouts.",
            "C": "API-based (REST, SOAP); Event-based (Platform Events, CDC, Streaming API); Middleware-based (MuleSoft, Dell Boomi, Informatica).",
            "D": "Only manual CSV export/import and SOAP."
          },
          "answer": "C",
          "explanation": "Salesforce integrations commonly use API-based, event-driven, and middleware/orchestration approaches depending on needs."
        },
        {
          "id": 2,
          "question": "What is REST API in Salesforce?",
          "options": {
            "A": "A lightweight API using HTTP methods (GET, POST, PATCH, DELETE) to interact with Salesforce data in JSON format.",
            "B": "A UI framework for building pages.",
            "C": "A SOAP-based protocol using XML only.",
            "D": "A local file-based integration method."
          },
          "answer": "A",
          "explanation": "REST is an HTTP/JSON based API commonly used for lightweight integrations with Salesforce resources."
        },
        {
          "id": 3,
          "question": "What is SOAP API?",
          "options": {
            "A": "A lightweight JSON API.",
            "B": "A mechanism for streaming events only.",
            "C": "A client-side JavaScript library.",
            "D": "A protocol-based API that uses XML and WSDL for structured communication."
          },
          "answer": "D",
          "explanation": "SOAP uses XML and formal contracts (WSDL) and suits integrations requiring strict typing and tooling support."
        },
        {
          "id": 4,
          "question": "Difference between REST API and SOAP API?",
          "options": {
            "A": "SOAP is always faster than REST.",
            "B": "They are identical in every way.",
            "C": "REST requires WSDL while SOAP does not.",
            "D": "REST → Lightweight, JSON, stateless. SOAP → Heavy, XML, strict contract (WSDL)."
          },
          "answer": "D",
          "explanation": "REST is generally simpler and JSON-friendly; SOAP is XML-centric with stricter contracts and WS-* features."
        },
        {
          "id": 5,
          "question": "What is Named Credential?",
          "options": {
            "A": "A static resource reference.",
            "B": "A permission set for external users.",
            "C": "A feature to name Apex classes.",
            "D": "A secure way to store authentication details and endpoint info for external callouts without hardcoding credentials in Apex."
          },
          "answer": "D",
          "explanation": "Named Credentials encapsulate endpoint and auth details so Apex can reference callout endpoints securely."
        },
        {
          "id": 6,
          "question": "Example of making REST callout in Apex?",
          "options": {
            "A": "System.enqueueJob(new HttpRequest());",
            "B": "Database.executeBatch(new HttpRequest());",
            "C": "Apex cannot make REST callouts.",
            "D": "HttpRequest req = new HttpRequest(); req.setEndpoint('callout:MyAPI'); req.setMethod('GET'); Http http = new Http(); HttpResponse res = http.send(req);"
          },
          "answer": "D",
          "explanation": "Use HttpRequest/Http/HttpResponse and refer to Named Credentials with 'callout:Name' in the endpoint when making REST callouts."
        },
        {
          "id": 7,
          "question": "What is Remote Site Setting?",
          "options": {
            "A": "A Salesforce config that allows callouts to external endpoints (if not using Named Credentials).",
            "B": "A type of Apex class.",
            "C": "A metadata loader tool.",
            "D": "A feature to store static files."
          },
          "answer": "A",
          "explanation": "Remote Site Settings whitelist external endpoints for Apex callouts when Named Credentials are not used."
        },
        {
          "id": 8,
          "question": "What are Callouts in Salesforce?",
          "options": {
            "A": "Only inbound API requests to Salesforce.",
            "B": "A declarative feature for field updates.",
            "C": "A type of scheduled job.",
            "D": "Requests made from Salesforce to external systems via HTTP/SOAP (REST or SOAP callouts)."
          },
          "answer": "D",
          "explanation": "Callouts are outbound HTTP or SOAP requests initiated from Apex or other Salesforce runtime contexts."
        },
        {
          "id": 9,
          "question": "Can callouts be made from Triggers?",
          "options": {
            "A": "Yes, synchronously inside any trigger without restrictions.",
            "B": "Only if running in a sandbox.",
            "C": "Only via Visualforce pages.",
            "D": "No — callouts are not allowed directly from triggers; use @future(callout=true), Continuation, or Queueable Apex."
          },
          "answer": "D",
          "explanation": "Triggers run in a synchronous DML context; long-running callouts must be moved to supported async patterns."
        },
        {
          "id": 10,
          "question": "What is Continuation in Salesforce?",
          "options": {
            "A": "A tool for scheduling batch jobs.",
            "B": "A mechanism for long-running asynchronous callouts from Visualforce/Aura to avoid sync timeouts.",
            "C": "A replacement for Named Credentials.",
            "D": "A streaming API subscription model."
          },
          "answer": "B",
          "explanation": "Continuation allows long-running external requests without blocking the original request thread and avoids client timeouts."
        },
        {
          "id": 11,
          "question": "What is Bulk API?",
          "options": {
            "A": "An API for inspecting metadata only.",
            "B": "An API for UI rendering.",
            "C": "An Apex class type.",
            "D": "An API optimized for loading/unloading large data volumes (asynchronous, batch-based)."
          },
          "answer": "D",
          "explanation": "Bulk API is designed for efficient bulk data loads and supports asynchronous chunked processing for large datasets."
        },
        {
          "id": 12,
          "question": "What is Streaming API?",
          "options": {
            "A": "A polling-based approach for data sync.",
            "B": "An API to upload videos to Salesforce.",
            "C": "A scheduled batch API.",
            "D": "Push-based integration that notifies clients in near real-time when Salesforce data changes."
          },
          "answer": "D",
          "explanation": "Streaming API allows clients to subscribe to topics (PushTopic, Platform Events, CDC) and receive notifications on data changes."
        },
        {
          "id": 13,
          "question": "What is Platform Event?",
          "options": {
            "A": "A type of Visualforce page.",
            "B": "A batch job manager.",
            "C": "A static resource type.",
            "D": "A Salesforce entity used for event-driven architecture to publish/subscribe messages."
          },
          "answer": "D",
          "explanation": "Platform Events are custom event objects you define and publish/subscribe to for asynchronous, event-driven integrations."
        },
        {
          "id": 14,
          "question": "What is Change Data Capture (CDC)?",
          "options": {
            "A": "A metadata deployment tool.",
            "B": "A type of REST API call.",
            "C": "A Visualforce remoting method.",
            "D": "Event-based mechanism that publishes record changes (create, update, delete, undelete) for subscribed objects in real time."
          },
          "answer": "D",
          "explanation": "CDC automatically emits events for data changes on configured objects, useful for syncing or downstream processing."
        },
        {
          "id": 15,
          "question": "Difference between Platform Events and CDC?",
          "options": {
            "A": "Platform Events are automatically emitted for every object; CDC must be manually published.",
            "B": "They are the same feature with different names.",
            "C": "CDC is only for user logins.",
            "D": "Platform Events: Custom events defined by developer; CDC: Automatically captures record changes in standard/custom objects."
          },
          "answer": "D",
          "explanation": "Platform Events are custom messages you publish; CDC emits events automatically for record changes on Salesforce objects."
        },
        {
          "id": 16,
          "question": "What is Outbound Messaging?",
          "options": {
            "A": "A REST-based webhook mechanism.",
            "B": "A method to send emails only.",
            "C": "An Apex queue for outgoing requests.",
            "D": "A declarative integration tool that sends SOAP messages to external systems from Workflow/Flow."
          },
          "answer": "D",
          "explanation": "Outbound Messaging lets declarative automations send SOAP payloads to configured endpoints without writing Apex code."
        },
        {
          "id": 17,
          "question": "What is Apex Web Service?",
          "options": {
            "A": "A hosted website on Salesforce servers.",
            "B": "A feature that automatically generates APIs without code.",
            "C": "A Java servlet running inside Salesforce.",
            "D": "An Apex class exposed as SOAP or REST endpoints using @WebService or @RestResource annotations."
          },
          "answer": "D",
          "explanation": "You can expose Apex methods as SOAP (@WebService) or REST (@RestResource) services for external systems to call."
        },
        {
          "id": 18,
          "question": "Example of exposing Apex as REST service?",
          "options": {
            "A": "global class MyService { void doGet() {} }",
            "B": "public interface MyService {}",
            "C": "Apex cannot be exposed as REST.",
            "D": "@RestResource(urlMapping='/myApi/*') global with sharing class MyService { @HttpGet global static String doGet() { return 'Hello World'; } }"
          },
          "answer": "D",
          "explanation": "Use @RestResource and HTTP method annotations to create RESTful Apex endpoints."
        },
        {
          "id": 19,
          "question": "Example of exposing Apex as SOAP service?",
          "options": {
            "A": "global with sharing class MySoapService { @HttpPost void post() {} }",
            "B": "public class SoapService {}",
            "C": "Apex SOAP services require external middleware.",
            "D": "global class MySoapService { webService static String getMsg(String name) { return 'Hello ' + name; } }"
          },
          "answer": "D",
          "explanation": "Declaring webService methods in Apex exposes them via SOAP; clients consume the generated WSDL."
        },
        {
          "id": 20,
          "question": "How do you test callouts in Apex tests?",
          "options": {
            "A": "By making real HTTP requests in test methods.",
            "B": "By skipping tests that require callouts.",
            "C": "Callouts run normally in test context without mocks.",
            "D": "Use HttpCalloutMock (or HttpCalloutMockFactory) to simulate responses since callouts are not allowed in tests."
          },
          "answer": "D",
          "explanation": "Unit tests must mock external callouts using HttpCalloutMock so tests remain deterministic and do not perform real network calls."
        },
        {
          "id": 21,
          "question": "What is Middleware in Salesforce integration?",
          "options": {
            "A": "A term for Salesforce-managed packages.",
            "B": "A kind of Apex class.",
            "C": "A Salesforce UI feature.",
            "D": "A software layer (e.g., MuleSoft, Dell Boomi) used to connect Salesforce with other systems, handling transformations, retries, orchestration."
          },
          "answer": "D",
          "explanation": "Middleware centralizes mapping, orchestration, and error handling for integrations spanning multiple systems."
        },
        {
          "id": 22,
          "question": "What is OData Connector in Salesforce?",
          "options": {
            "A": "A deprecated SOAP feature.",
            "B": "A Java library for building connect apps.",
            "C": "A bulk API alternative.",
            "D": "Allows Salesforce to access external data as External Objects via the OData protocol (Salesforce Connect)."
          },
          "answer": "D",
          "explanation": "OData lets Salesforce reference external data in real time without copying it into the platform using External Objects."
        },
        {
          "id": 23,
          "question": "What are External Objects?",
          "options": {
            "A": "Local copies of external data imported via Data Loader.",
            "B": "Objects only available in Sandbox.",
            "C": "Objects automatically created for every API integration.",
            "D": "Read-only representations of data stored outside Salesforce, accessed via Salesforce Connect."
          },
          "answer": "D",
          "explanation": "External Objects expose external system records inside Salesforce UI and via SOQL-like access while the data remains external."
        },
        {
          "id": 24,
          "question": "What is the difference between Salesforce Connect and Data Loader?",
          "options": {
            "A": "They are the same tool with different names.",
            "B": "Data Loader provides real-time federation only.",
            "C": "Salesforce Connect is only for backups.",
            "D": "Salesforce Connect → Real-time access (no data storage). Data Loader → Imports data into Salesforce."
          },
          "answer": "D",
          "explanation": "Salesforce Connect federates external data at runtime; Data Loader imports and persists data into Salesforce objects."
        },
        {
          "id": 25,
          "question": "How do you secure integrations in Salesforce?",
          "options": {
            "A": "Use plaintext credentials in Apex for simplicity.",
            "B": "Disable login auditing only.",
            "C": "Only use HTTP without TLS.",
            "D": "Using OAuth 2.0, Named Credentials, IP restrictions, Connected Apps, and appropriate permission controls."
          },
          "answer": "D",
          "explanation": "Secure integrations use OAuth flows, Named Credentials, least-privilege access, and network/security controls to protect data and credentials."
        },
        {
          "id": 26,
          "question": "What is Connected App in Salesforce?",
          "options": {
            "A": "A way to package Apex code for the AppExchange.",
            "B": "A custom object type.",
            "C": "A UI skin for Salesforce.",
            "D": "A framework to allow external applications to authenticate with Salesforce using OAuth and manage access (client id/secret, callback)."
          },
          "answer": "D",
          "explanation": "Connected Apps register external clients and define OAuth scopes, policies, and allowed flows for API access."
        },
        {
          "id": 27,
          "question": "What is OAuth 2.0 in Salesforce?",
          "options": {
            "A": "A storage format for static resources.",
            "B": "A database replication tool.",
            "C": "A Visualforce-only authentication mode.",
            "D": "An authentication protocol that allows secure delegated access to Salesforce APIs."
          },
          "answer": "D",
          "explanation": "OAuth 2.0 supports delegated authorization flows like Authorization Code and JWT to obtain access tokens for API calls."
        },
        {
          "id": 28,
          "question": "Different OAuth flows supported by Salesforce?",
          "options": {
            "A": "Only Authorization Code Flow.",
            "B": "Only custom proprietary flows.",
            "C": "OAuth is not supported in Salesforce.",
            "D": "Authorization Code Flow; Username-Password Flow; JWT Bearer Flow; Client Credentials Flow."
          },
          "answer": "D",
          "explanation": "Salesforce supports multiple OAuth flows to accommodate interactive users and trusted server-to-server integrations."
        },
        {
          "id": 29,
          "question": "What is difference between Authorization Code Flow and JWT Flow?",
          "options": {
            "A": "They are identical processes.",
            "B": "JWT requires user click-through; Auth Code does not.",
            "C": "Auth Code is only for SOAP API.",
            "D": "Auth Code Flow → Interactive user login; JWT Flow → Server-to-server without user interaction (signed JWT)."
          },
          "answer": "D",
          "explanation": "Auth Code involves user consent and redirect; JWT is used for server-to-server integrations using certificates for authentication."
        },
        {
          "id": 30,
          "question": "What is EventBus in Salesforce?",
          "options": {
            "A": "A UI component framework.",
            "B": "A server-side queueing mechanism for Apex jobs only.",
            "C": "A deprecated feature from Classic.",
            "D": "The mechanism that stores and delivers events (Platform Events, CDC) within Salesforce for subscribers to consume."
          },
          "answer": "D",
          "explanation": "EventBus is the internal pub/sub backbone that handles publishing, retention, and delivery of events such as Platform Events and CDC."
        },
        {
          "id": 31,
          "question": "How long are Platform Events retained in Salesforce?",
          "options": {
            "A": "30 minutes only.",
            "B": "Forever until manually deleted.",
            "C": "Only during the transaction.",
            "D": "72 hours (default retention window)."
          },
          "answer": "D",
          "explanation": "Platform Events have a retention window (commonly 72 hours) during which replays are possible using ReplayId."
        },
        {
          "id": 32,
          "question": "What is ReplayId in Streaming API/Platform Events?",
          "options": {
            "A": "A static configuration value for PushTopics.",
            "B": "A permission label for subscribers.",
            "C": "A token that expires immediately and cannot be reused.",
            "D": "A unique ID assigned to each event used to retrieve or replay missed events."
          },
          "answer": "D",
          "explanation": "ReplayId lets subscribers resume consumption from a specific point to avoid missing events during downtime."
        },
        {
          "id": 33,
          "question": "What is Named Credential vs Custom Metadata for Integration?",
          "options": {
            "A": "They are the same feature with different names.",
            "B": "Custom Metadata stores endpoint secrets directly for callouts.",
            "C": "Named Credential is only for internal APIs.",
            "D": "Named Credential → Authentication + Endpoint; Custom Metadata → Stores configs like API keys but not auth specifics."
          },
          "answer": "D",
          "explanation": "Named Credentials manage endpoint + auth; Custom Metadata stores configuration values and can be deployed between orgs."
        },
        {
          "id": 34,
          "question": "What is Inbound vs Outbound Integration in Salesforce?",
          "options": {
            "A": "Inbound → Salesforce calls external systems; Outbound → External system reads Salesforce data.",
            "B": "They are identical concepts.",
            "C": "Only relevant for SOAP API.",
            "D": "Inbound → External system calls Salesforce APIs; Outbound → Salesforce makes callouts to external systems."
          },
          "answer": "D",
          "explanation": "Inbound means external clients call Salesforce endpoints; outbound means Salesforce initiates requests to external endpoints."
        },
        {
          "id": 35,
          "question": "What is the daily API request limit in Salesforce?",
          "options": {
            "A": "Unlimited for all editions.",
            "B": "Exactly 10,000 requests per org per day.",
            "C": "Only limited by storage.",
            "D": "Depends on edition & license — for example, Enterprise has a baseline that often starts around 100,000/day but varies; check org limits."
          },
          "answer": "D",
          "explanation": "API daily limits vary by edition, license count, and feature entitlements; verify the org’s specific limit in Setup or documentation."
        },
        {
          "id": 36,
          "question": "What is the difference between REST Composite API and Batch API?",
          "options": {
            "A": "They are the same endpoint with different names.",
            "B": "Composite is always asynchronous; Batch is always synchronous.",
            "C": "Composite API only supports SOAP payloads.",
            "D": "Composite API → Combine multiple REST calls in one request (transactional grouping). Batch API → Execute multiple independent requests in parallel."
          },
          "answer": "D",
          "explanation": "Composite groups related calls (can be transactional), while Batch sends multiple independent subrequests in one HTTP call executed in parallel."
        },
        {
          "id": 37,
          "question": "What is Pub/Sub API?",
          "options": {
            "A": "A UI widget set for publishing content.",
            "B": "A deprecated REST endpoint.",
            "C": "A scheduling API for batches.",
            "D": "A Salesforce API for event-driven integrations supporting high throughput (gRPC style) for Platform Events and CDC."
          },
          "answer": "D",
          "explanation": "Pub/Sub APIs support high-volume event streaming and subscriptions for external consumers."
        },
        {
          "id": 38,
          "question": "What are common integration patterns in Salesforce?",
          "options": {
            "A": "Only two patterns: Database sync and UI embedding.",
            "B": "Only file-based ETL is recommended.",
            "C": "Visualforce remoting is the only pattern.",
            "D": "Remote Call-In (Inbound); Remote Process Invocation (Outbound); Batch Data Sync; Event-driven messaging."
          },
          "answer": "D",
          "explanation": "These patterns cover inbound APIs, outbound process calls, scheduled/batch sync, and event-driven architectures for integration design."
        },
        {
          "id": 39,
          "question": "When would you use Middleware vs Direct API?",
          "options": {
            "A": "Middleware → For simple one-off point-to-point connections only; Direct API → For complex orchestrations.",
            "B": "They should never be mixed.",
            "C": "Only middleware supports OAuth.",
            "D": "Middleware → Complex transformations, orchestration, multiple systems; Direct API → Simple point-to-point integration."
          },
          "answer": "D",
          "explanation": "Middleware is ideal for routing, transformation, retry logic, and multi-system orchestration; direct API calls suffice for simple integrations."
        },
        {
          "id": 40,
          "question": "What are best practices for Salesforce integration?",
          "options": {
            "A": "Hardcode credentials in Apex for speed.",
            "B": "Ignore governor limits during integration testing.",
            "C": "Always use synchronous callouts in triggers.",
            "D": "Use Named Credentials; Avoid hardcoding endpoints/keys; Use Platform Events for async integrations; Respect governor limits; Implement retries & error handling."
          },
          "answer": "D",
          "explanation": "Secure configuration, avoiding hardcoding, favoring async patterns, and robust error/retry handling are essential integration best practices."
        }
      ]
    }
  }
}
